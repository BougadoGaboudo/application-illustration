generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  cart        Cart?
  commissions Commission[]
  role        Role         @default(client)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id             Int          @id @default(autoincrement())
  cartId         Int
  illustrationId Int
  format         Format
  type           Type
  quantity       Int
  priceId        Int
  cart           Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  illustration   Illustration @relation(fields: [illustrationId], references: [id], onDelete: Cascade)
  price          Price        @relation(fields: [priceId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Illustration {
  id        Int              @id @default(autoincrement())
  title     String
  url       String
  type      IllustrationType
  cartItems CartItem[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Price {
  id       Int        @id @default(autoincrement())
  format   Format
  type     Type
  amount   Float
  CartItem CartItem[]
}

model Commission {
  id                Int              @id @default(autoincrement())
  userId            Int
  commissionPriceId Int
  title             String
  description       String           @db.Text
  type              CommissionType
  background        Boolean          @default(false)
  status            CommissionStatus @default(pending)
  rejectionReason   String?          @db.Text
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissionPrice   CommissionPrice  @relation(fields: [commissionPriceId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model CommissionPrice {
  id          Int            @id @default(autoincrement())
  amount      Int
  type        CommissionType
  background  Boolean
  bonus       Int?
  commissions Commission[]
}

enum Role {
  client
  admin
}

enum IllustrationType {
  original
  fanart
  study
}

enum Format {
  A5
  A4
  A3
  A2
}

enum Type {
  print
  scroll
}

enum CommissionType {
  fullbody
  halfbody
  portrait
}

enum CommissionStatus {
  pending
  in_progress
  completed
  rejected
}
